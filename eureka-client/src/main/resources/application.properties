spring.application.name=eureka-client
server.port=9401
#表示是否需要将自己注册到Eureka Server上(默认为true),本次位单机部署,不需要设置为true;
# 但是注册中心集群时候必须为true;因为集群时,需要提供本Eureka Server可发现性;(即是否注册自己的开关)
eureka.client.register-with-eureka=true
#表示是否从Eureka Server获取注册信息(默认为true);这是一个单点的 Eureka Server，不需要同步其他节点的数据，可以设为false
eureka.client.fetch-registry=true
#eureka.instance.status-page-url=
#eureka.instance.status-page-url-path=
eureka.client.service-url.defaultZone=http://localhost:8081/eureka/

#负载的配置规则
#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #配置规则 随机
#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询
#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #配置规则 重试
#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule #配置规则 响应时间权重
#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略
#ConnectTimeout: 500 #请求连接超时时间
#ReadTimeout: 1000 #请求处理的超时时间
#OkToRetryOnAllOperations: true #对所有请求都进行重试
#MaxAutoRetriesNextServer: 2 #切换实例的重试次数
#MaxAutoRetries: 1 #对当前实例的重试次数
#user-server.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RetryRule
user-server.ribbon.NFLoadBalancerRuleClassName=com.dong.demo.config.CustomRule
#请求连接超时时间
#user-server.ribbon.ConnectTimeout=500
#请求处理的超时时间
#user-server.ribbon.ReadTimeout=1000
#对所有请求都进行重试
#user-server.ribbon.OkToRetryOnAllOperations=true
#切换实例的重试次数
#user-server.ribbon.MaxAutoRetriesNextServer=2
#对当前实例的重试次数
#user-server.ribbon.MaxAutoRetries=1

#provider的地址
service-url.userServiceUrl=http://user-server